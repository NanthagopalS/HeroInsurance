/* [dbo].[POSP_POSPMigrationUserCreation] */CREATE   PROCEDURE [dbo].[POSP_POSPMigrationUserCreation]ASBEGIN	BEGIN TRY		BEGIN			DECLARE @TransactionName NVARCHAR(20) = 'DUMPPOSPTransaction';			BEGIN TRANSACTION @TransactionName;			PRINT ('user')			MERGE HeroIdentity.dbo.Identity_User AS UserTable			USING POSPMigrationDumpTable AS MGTable				ON MGTable.mobile = UserTable.MobileNo			WHEN NOT MATCHED BY Target				THEN					INSERT (						UserName						,EmailId						,MobileNo						,[Password]						,RoleId						,IsActive						,CreatedBy						,CreatedOn						,UserProfileStage						,DOB						,Gender						,POSPId						,IIBStatus						,IIBUploadStatus						,CreatedByMode						,ReferralId						,IsRegistrationVerified						,iib_upload_date						,IsDocQCVerified						)					VALUES (						MGTable.name						,MGTable.email						,MGTable.mobile						,NULL						,'2D6B0CE9-15C7-4839-93D1-8387944BC42F'						,1						,'4809F530-3466-4592-AE9E-7F0FA85D402D' -- PROD ADMIN UserId mailto:admin@heroibil.com						,MGTable.created_date						,CASE 							WHEN MGTable.AgreementStatus = 'COMPLETED'								THEN 5							ELSE 4							END						,MGTable.dob						,MGTable.gender						,MGTable.posp_code						,CASE 							WHEN MGTable.IIBUploadStatus = 'UPLOADED'								THEN 'NOT EXISTING'							ELSE 'Pending'							END						,CASE 							WHEN MGTable.IIBUploadStatus = 'UPLOADED'								THEN 'SUCCESS'							ELSE 'Pending'							END						,'Assisted'						,(							SELECT TOP 1 UserId AS CUR_CREATED_BY							FROM HeroIdentity.dbo.Identity_User WITH (NOLOCK)							WHERE MobileNo = MGTable.created_by							)						,1,						MGTable.iib_upload_date						,1						)			WHEN MATCHED THEN UPDATE SET 
	  UserTable.CreatedByMode='Assisted';			PRINT ('Map UserIDs')			MERGE POSPMigrationDumpTable AS MGTable			USING HeroIdentity.dbo.Identity_User AS UserTable				ON MGTable.mobile = UserTable.MobileNo			WHEN MATCHED				THEN					UPDATE					SET MGTable.UserId = UserTable.UserId;			PRINT ('userDetails')			MERGE HeroIdentity.dbo.Identity_UserDetail AS UserDetails			USING POSPMigrationDumpTable AS MGTable				ON MGTable.UserId = UserDetails.UserId					AND MGTable.IsImported = 0			WHEN NOT MATCHED BY Target				THEN					INSERT (						UserId						,DateofBirth						,Gender						,AlternateContactNo						,AadhaarNumber						,PAN						,IsNameDifferentOnDocument						,AliasName						,EducationQualificationTypeId						,InsuranceProductsofInterestTypeId						,POSPSourceMode						,SourcedByUserId						,ServicedByUserId						,NOCAvailable						,IsActive						,IsSelling						,AssistedBUId						,POSPSourceTypeId						,CreatedOn						,CreatedBy						)					VALUES (						MGTable.UserId						,MGTable.DOB						,MGTable.gender						,MGTable.alternate_mobile						,MGTable.adhar_no						,MGTable.pan_number						,CASE 							WHEN MGTable.alias_name IS NOT NULL								THEN 1							ELSE 0							END						,MGTable.alias_name						,(							SELECT TOP 1 Id							FROM HeroIdentity.dbo.Identity_EducationQualificationTypeMaster WITH (NOLOCK)							WHERE LOWER(EducationQualificationType) = LOWER(MgTable.educational_qualification)							)						,NULL						,1						,(							SELECT TOP 1 UserId							FROM HeroIdentity.dbo.Identity_User WITH (NOLOCK)							WHERE MobileNo = MGTable.sourced_by							)						,(							SELECT TOP 1 UserId							FROM HeroIdentity.dbo.Identity_User WITH (NOLOCK)							WHERE MobileNo = MGTable.serviced_by							)						,MGTable.noc_available						,1						,'YES'						,(							SELECT TOP 1 BUId							FROM HeroAdmin.dbo.Admin_bu WITH (NOLOCK)							WHERE LOWER(BUName) = LOWER(MGTable.POSPBU)							)						,(							SELECT TOP 1 Id							FROM [HeroIdentity].[dbo].[Identity_POSPSourceTypeMaster] WITH (NOLOCK)							WHERE LOWER(POSPSourceType) = LOWER(MGTable.posp_source)							)						,MGTable.created_date						,'4809F530-3466-4592-AE9E-7F0FA85D402D'						)			WHEN MATCHED				THEN					UPDATE					SET UserDetails.Assistedbuid = (							SELECT TOP 1 BUId							FROM HeroAdmin.dbo.Admin_bu WITH (NOLOCK)							WHERE LOWER(BUName) = LOWER(MGTable.POSPBU)							)						,UserDetails.POSPSourceTypeId = (							SELECT TOP 1 Id							FROM [HeroIdentity].[dbo].[Identity_POSPSourceTypeMaster] WITH (NOLOCK)							WHERE LOWER(POSPSourceType) = LOWER(MGTable.posp_source)							)						,UserDetails.SourcedByUserId = (							SELECT TOP 1 UserId							FROM HeroIdentity.dbo.Identity_User WITH (NOLOCK)							WHERE MobileNo = MGTable.sourced_by							)						,UserDetails.ServicedByUserId = (							SELECT TOP 1 UserId							FROM HeroIdentity.dbo.Identity_User WITH (NOLOCK)							WHERE MobileNo = MGTable.serviced_by							)						,userDetails.CreatedBy = '4809F530-3466-4592-AE9E-7F0FA85D402D';			PRINT ('address')			MERGE HeroIdentity.dbo.Identity_UserAddressDetail AS UserAddress			USING POSPMigrationDumpTable AS MG				ON MG.UserId = UserAddress.UserId					AND MG.IsImported = 0			WHEN NOT MATCHED BY Target				THEN					INSERT (						UserId						,AddressLine1						,AddressLine2						,Pincode						,CityId						,StateId						,IsActive						)					VALUES (						MG.UserId						,MG.address1						,MG.address2						,MG.pincode						,(							SELECT TOP 1 CityId							FROM HeroIdentity.dbo.identity_city WITH (NOLOCK)							WHERE LOWER(CityName) = LOWER(MG.city)							)						,(							SELECT TOP 1 StateId							FROM HeroIdentity.dbo.identity_pincode WITH (NOLOCK)							WHERE pincode = MG.pincode							)						,1						);			PRINT ('PANVerification')			MERGE HeroIdentity.dbo.Identity_PanVerification AS PAN			USING POSPMigrationDumpTable AS MG				ON MG.UserId = PAN.UserId					AND MG.IsImported = 0			WHEN NOT MATCHED BY Target				THEN					INSERT (						PanNumber						,[Name]						,FatherName						,DOB						,InstanceId						,InstanceCallbackUrl						,CreatedBy						,CreatedOn						,UserId						,IsActive						)					VALUES (						UPPER(MG.pan_number)						,MG.[name]						,CASE 							WHEN MG.father_name IS NULL								THEN ' '							ELSE MG.father_name							END						,MG.dob						,'MIG'						,'https://www.w3schools.com'						,MG.CreatedBy						,GETDATE()						,MG.UserId						,1						);			PRINT ('Identity_UserBankDetail')			MERGE HeroIdentity.dbo.Identity_UserBankDetail AS BANK			USING POSPMigrationDumpTable AS MG				ON MG.UserId = BANK.UserId					AND MG.IsImported = 0			WHEN NOT MATCHED BY Target				THEN					INSERT (						UserId						,BankId						,IFSC						,AccountHolderName						,AccountNumber						,IsActive						)					VALUES (						MG.UserId						,(							SELECT TOP 1 Id							FROM HeroIdentity.dbo.Identity_BankNameMaster WITH (NOLOCK)							WHERE LOWER(BankName) = LOWER(MG.bank_name)							)						,MG.ifsc_code						,ISNULL(MG.account_holder_name, MG.name) -- take user name if banifyciary name is null						,MG.account_number						,1						)			WHEN MATCHED				THEN					UPDATE					SET BANK.BankId = (							SELECT TOP 1 Id							FROM HeroIdentity.dbo.Identity_BankNameMaster WITH (NOLOCK)							WHERE LOWER(BankName) = LOWER(MG.bank_name)							)						,BANK.IFSC = MG.ifsc_code						,BANK.AccountHolderName = ISNULL(MG.account_holder_name, MG.name)						,BANK.AccountNumber = MG.account_number						,BANK.IsActive = 1;			PRINT ('Identity_UserBreadcrumStatusDetail -- kyc')			MERGE HeroIdentity.dbo.Identity_UserBreadcrumStatusDetail AS UBSD			USING POSPMigrationDumpTable AS MG				ON MG.UserId = UBSD.UserId					AND MG.IsImported = 0					AND UBSD.StatusId = 'D07C1631-7FF7-4B4F-A28C-677A7961ED23'			WHEN NOT MATCHED BY Target				THEN					INSERT (						UserId						,StatusId						,IsActive						)					VALUES (						MG.UserId						,'D07C1631-7FF7-4B4F-A28C-677A7961ED23'						,1						);-- KYC			PRINT ('Identity_UserBreadcrumStatusDetail -- account created')			MERGE HeroIdentity.dbo.Identity_UserBreadcrumStatusDetail AS UBSD			USING POSPMigrationDumpTable AS MG				ON MG.UserId = UBSD.UserId					AND MG.IsImported = 0					AND UBSD.StatusId = '5CBB7AA9-FBDB-446A-9622-4265D848EE3F'			WHEN NOT MATCHED BY Target				THEN					INSERT (						UserId						,StatusId						,IsActive						)					VALUES (						MG.UserId						,'5CBB7AA9-FBDB-446A-9622-4265D848EE3F'						,1						);-- Account Created			PRINT ('Identity_UserBreadcrumStatusDetail -- training')			MERGE HeroIdentity.dbo.Identity_UserBreadcrumStatusDetail AS UBSD			USING POSPMigrationDumpTable AS MG				ON MG.UserId = UBSD.UserId					AND MG.IsImported = 0					AND UBSD.StatusId IN (						'90290875-8183-48A8-BF43-18F6D8D4A516'						,'69F5F8AF-863B-46A5-AF6C-29332A9400B7'						,'9F889822-78A1-4ED3-A0D2-0D90FA45AEA6'						)			WHEN NOT MATCHED BY Target				THEN					INSERT (						UserId						,StatusId						,IsActive						)					VALUES (						MG.UserId						,CASE 							WHEN MG.exam_status = 'Pass'								THEN '69F5F8AF-863B-46A5-AF6C-29332A9400B7'							ELSE '9F889822-78A1-4ED3-A0D2-0D90FA45AEA6'							END						,1						);-- Training & Exam			PRINT ('Identity_UserBreadcrumStatusDetail -- Agreement')			MERGE HeroIdentity.dbo.Identity_UserBreadcrumStatusDetail AS UBSD			USING POSPMigrationDumpTable AS MG				ON MG.UserId = UBSD.UserId					AND MG.IsImported = 0					AND UBSD.StatusId IN (						'6A502BE5-4DF0-4615-99A9-255815FC20C8'						,'3C848091-4082-4D52-B1BE-FE850D60E20B'						,'9A607327-A14E-43E1-866C-ED78F07205EC'						)			WHEN NOT MATCHED BY Target				THEN					INSERT (						UserId						,StatusId						,IsActive						)					VALUES (						MG.UserId						,CASE 							WHEN MG.AgreementStatus = 'COMPLETED'								THEN '9A607327-A14E-43E1-866C-ED78F07205EC'							ELSE '3C848091-4082-4D52-B1BE-FE850D60E20B'							END						,1						);-- Agreement Sign			PRINT ('Identity_EmailVerification ')			MERGE HeroIdentity.dbo.Identity_EmailVerification AS EV			USING POSPMigrationDumpTable AS MG				ON MG.UserId = EV.UserId					AND MG.IsImported = 0			WHEN NOT MATCHED BY Target				THEN					INSERT (						[GuId]						,LinkSendDateTime						,UserId						,EmailId						,IsVerify						,IsActive						)					VALUES (						(newid())						,GETDATE()						,MG.UserId						,MG.Email						,1						,1						);-- Email Verification			PRINT ('POSP_Agreement ')			MERGE POSP_Agreement AS AG			USING POSPMigrationDumpTable AS MG				ON MG.UserId = AG.UserId					AND MG.IsImported = 0			WHEN NOT MATCHED BY Target				THEN					INSERT (						UserId						,AgreementId						,PreSignedAgreementId						,IsActive						,CreatedBy						,CreatedOn						,StampId						,IsRevoked						,UpdatedOn						)					VALUES (						MG.UserId						,CASE 							WHEN MG.AgreementStatus = 'COMPLETED'								THEN newid()							ELSE NULL							END						,CASE 							WHEN MG.AgreementStatus = 'COMPLETED'								THEN newid()							ELSE NULL							END						,1						,MG.UserId						,CASE 							WHEN MG.AgreementStatus = 'COMPLETED'								THEN DATEADD(HOUR, 8, CAST(MG.exam_end AS DATETIME))							ELSE GETDATE()							END						,NULL						,CASE 							WHEN MG.AgreementStatus = 'DECLINED'								THEN 1							ELSE NULL							END						,CASE 							WHEN MG.AgreementStatus = 'COMPLETED'								THEN DATEADD(HOUR, 9, CAST(MG.exam_end AS DATETIME))							ELSE NULL							END						);			PRINT ('POSP_Exam')			MERGE POSP_Exam AS AG			USING POSPMigrationDumpTable AS MG				ON MG.UserId = AG.UserId					AND MG.IsImported = 0			WHEN NOT MATCHED BY Target				THEN					INSERT (						UserId						,ExamStartDateTime						,ExamEndDateTime						,CorrectAnswered						,InCorrectAnswered						,SkippedAnswered						,FinalResult						,IsCleared						,IsActive						,CreatedBy						,ExamIdealEndDateTime						,DocumentId						)					VALUES (						MG.UserId						,MG.exam_start						,MG.exam_end						,0						,10						,10						,1						,1						,1						,MG.UserId						,MG.exam_end						,NULL						);			PRINT ('POSP_Training')			MERGE POSP_Training AS AG			USING POSPMigrationDumpTable AS MG				ON MG.UserId = AG.UserId					AND MG.IsImported = 0			WHEN NOT MATCHED BY Target				THEN					INSERT (						UserId						,GeneralInsuranceStartDateTime						,GeneralInsuranceEndDateTime						,LifeInsuranceStartDateTime						,LifeInsuranceEndDateTime						,IsGeneralInsuranceCompleted						,IsLifeInsuranceCompleted						,IsTrainingCompleted						,IsActive						,CreatedBy						,CreatedOn						,GeneralInsuranceIdealEndDateTime						,LifeInsuranceIdealEndDateTime						)					VALUES (						MG.UserId						,MG.general_training_start						,MG.general_training_end						,MG.life_insurance_training_start						,MG.life_insurance_training_end						,1						,1						,CASE 							WHEN MG.exam_status = 'Pass'								THEN 1							ELSE 0							END						,1						,MG.UserId						,GETDATE()						,MG.general_training_end						,MG.life_insurance_training_start						);			PRINT ('HeroIdentity.dbo.Identity_UserInsuranceProductsOfInterest ')			MERGE HeroIdentity.dbo.Identity_UserInsuranceProductsOfInterest AS UIP			USING POSPMigrationDumpTable AS MG				ON MG.UserId = UIP.UserId					AND MG.IsImported = 0					AND UIP.IsActive = 1			WHEN NOT MATCHED BY Target				THEN					INSERT (						UserId						,InsuranceProductsOfInterestId						,IsActive						)					VALUES (						MG.UserId						,(							SELECT TOP 1 Id							FROM HeroIdentity.dbo.Identity_InsuranceProductsOfInterest WITH (NOLOCK)							WHERE LOWER(ProductName) = LOWER(MG.product_type)							)						,1						)			WHEN MATCHED				THEN					UPDATE					SET InsuranceProductsOfInterestId = (							SELECT TOP 1 Id							FROM HeroIdentity.dbo.Identity_InsuranceProductsOfInterest WITH (NOLOCK)							WHERE LOWER(ProductName) = LOWER(MG.product_type)							);			COMMIT TRANSACTION @TransactionName;		END	END TRY	BEGIN CATCH		ROLLBACK TRANSACTION @TransactionName;		DECLARE @StrProcedure_Name VARCHAR(500)			,@ErrorDetail VARCHAR(1000)			,@ParameterList VARCHAR(2000)		SET @StrProcedure_Name = ERROR_PROCEDURE()		SET @ErrorDetail = ERROR_MESSAGE()		EXEC POSP_InsertErrorDetail @StrProcedure_Name = @StrProcedure_Name			,@ErrorDetail = @ErrorDetail			,@ParameterList = @ParameterList	END CATCHEND